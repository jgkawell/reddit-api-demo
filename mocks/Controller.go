// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/jgkawell/reddit-api-demo/models"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// Start provides a mock function with no fields
func (_m *Controller) Start() {
	_m.Called()
}

// Stats provides a mock function with given fields: ctx, subreddit, limit
func (_m *Controller) Stats(ctx context.Context, subreddit string, limit int) ([]models.LinkStats, []models.UserStats, error) {
	ret := _m.Called(ctx, subreddit, limit)

	if len(ret) == 0 {
		panic("no return value specified for Stats")
	}

	var r0 []models.LinkStats
	var r1 []models.UserStats
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]models.LinkStats, []models.UserStats, error)); ok {
		return rf(ctx, subreddit, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []models.LinkStats); ok {
		r0 = rf(ctx, subreddit, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.LinkStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) []models.UserStats); ok {
		r1 = rf(ctx, subreddit, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]models.UserStats)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int) error); ok {
		r2 = rf(ctx, subreddit, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewController(t interface {
	mock.TestingT
	Cleanup(func())
}) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
